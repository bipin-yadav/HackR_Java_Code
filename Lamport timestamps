The algorithm of Lamport timestamps is a simple algorithm used to determine the order of events in a distributed computer system. As different nodes or processes will typically not be perfectly synchronized, this algorithm is used to provide a partial ordering of events with minimal overhead, and conceptually provide a starting point for the more advanced vector clock method. Lamport invented a simple mechanism by which the happened-before ordering can be captured numerically. A Lamport logical clock is an incrementing software counter maintained in each process.
Given a system with N processes. Initially you are given the integral timestamp wherein each of them comes in for execution. The interesting thing about the system is that after a process with a timestamp ti is executed, it returns again at a timestamp 2 x ti. The resources provided are enough for only the first K processes to be executed. Find the sum of the timestamps of the processes that are executed.
Input:
First line contains an integer T. T test cases follow.
First line of each test case contains two space-separated integers N and K.
Second line of each test case contains N space-separated integers,the initial timestamps of the processes.
Output:
Print the answer to each test case in a new line.
Constraints:
1 ≤ T ≤ 10
1 ≤ N ≤ 105
0 ≤ K ≤ 1000
1 ≤ ti ≤ 100
SAMPLE INPUT
 
1
5 3
2 9 7 3 5
SAMPLE OUTPUT
 
9
Explanation
3 processes can be executed. The 1st process is executed with timestamp=2, the 4th with timestamp=3 and the 1st is executed as it returns at timestamp=4. Hence, sum of timestamps = 9.
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class TestClass {
	public static void main(String args[]) throws Exception {
		FastScanner in = new FastScanner(System.in);
		int T = in.nextInt();
		int[] numbers;
		for (int i = 0; i < T; ++i) {
			int N = in.nextInt();
			int K = in.nextInt();
			numbers = new int[N];
			for (int q = 0; q < N; ++q) {
				numbers[q] = in.nextInt();				
			}
			System.out.println(findNumber(numbers, K));
		}
		
	}

	private static int findNumber(int[] inputArray, int K) {
		int ans = 0, count = 0;
		int index = getMinValue(inputArray);
		int time = inputArray[index];
		
		while(count < K){			
			for (int i = 0; i < inputArray.length ; ++i) {
				if(inputArray[i] <= time ){
					inputArray[i] = 2*time;
					ans = ans + time;
					time++;
					count++;
					if(count == K){
						break;
					}
				}				
			}
		}
		return ans;
	}
	
	//getting the miniumum value
	public static int getMinValue(int[] array){  
	     int minValue = array[0];  
	     int min = 0;
	     int i = 1;
	     for(;i<array.length;i++){  
	     if(array[i] < minValue){  
	    	 minValue = array[i];  
	    	 min = i;
	        }  
	     }  
	    return min;  
	}  

	
	static class FastScanner {
		BufferedReader br;
		StringTokenizer st;

		public FastScanner(InputStream input) {
			br = new BufferedReader(new InputStreamReader(input));
			st = new StringTokenizer("");
		}

		public String next() throws IOException {
			if (st.hasMoreTokens()) {
				return st.nextToken();
			} else {
				st = new StringTokenizer(br.readLine());
				return next();
			}
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
	}
}



